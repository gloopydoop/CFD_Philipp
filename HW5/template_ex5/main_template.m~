function [] = main_template(

direct = true;
Nx = 50;                                 % Number of points in x
Ny = 50;                                 % Number of points in y
Lx = 1;  Ly = 1;                         % Size of the domain  
omega = 1.9;                             % SOR parameter
hx = Lx/Nx; hy = Ly/Ny;                  % Grid spacing
x = linspace(0,Lx,Nx+1);                 % x-coordinates length N+1 at grid nodes
y = linspace(0,Ly,Ny+1);                 % y-coordinates length N+1 at grid nodes

% Assemble x and y - coordinate at cell centers into 1-D vector length N*N
X = (x(1:end-1) + x(2:end))/2;
Y = (y(1:end-1) + y(2:end))/2;

% Define the forcing function (NOTE: correct ordering!)
[x_mg, y_mg] = meshgrid(X,Y);
f = cos(3*pi*x_mg).*(exp(y_mg.^2) + 2.*y_mg.^2.*exp(y_mg.^2)-exp(1));
f=reshape(f',Nx*Ny,1); % could be wrong!!!

%-----------------------------------------
% Assemble laplacian matrix
L = Lapl(Nx, Ny, hx, hy);

% % Set one Dirichlet value to fix pressure in one point
L(1,:) = zeros(size(f)); L(1,1) = 1; f(1)=0;

% Solve the problem with a direct method (Matlab's backslash)
if direct == true
     p_direct = L\f;
    % plot p_direct
    figure(2)
    surf(X, Y, reshape(p_direct, Nx, Ny)')
    zlabel('p_{dir}')
    xlabel('x')
    ylabel('y')
    
else

%-----------------------------------------

% Set up the initial guess
p0 = zeros(size(f));

% Set up the tolerance and maximum number of iterations
tol   = 10^-6;
maxit = 1000;

% Compute the iterative solution
omega = 1:0.2:2;

[p, r] = GS_SOR(omega, Nx, Ny, hx, hy, L, f, p0, tol, maxit);
end

figure()
for i =1:length(omega)
    
    semilogy(r)
    leg{i} = ['\omega = ',num2str(omega(i))];
    hold on
end

xlabel('Iteration')
ylabel('Residual')
legend(leg)



%-----------------------------------------
% plots
